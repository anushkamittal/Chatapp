{"version":3,"sources":["../../src/models/user.js"],"names":["User","app","user","callback","err","errors","fields","validations","name","errorMessage","do","_","get","length","email","password","forEach","feild","feildvalidation","isValid","msg","push","join","db","console","log","Promise","resolve","reject","beforeSave","dbo","collection","insertOne","info","message"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;;;;;IAGqBA,I;AAEjB,kBAAYC,GAAZ,EAAgB;AAAA;;AAEZ,aAAKA,GAAL,GAAWA,GAAX;AAEH;;;;mCAEUC,I,EAAiC;AAAA,gBAA3BC,QAA2B,uEAAhB,UAACC,GAAD,EAAKF,IAAL,EAAa,CAAE,CAAC;;;AAExC;;AAEA,gBAAIG,SAAS,EAAb;AACA,gBAAMC,SAAS,CAAC,MAAD,EAAQ,OAAR,EAAgB,UAAhB,CAAf;AACA,gBAAMC,cAAc;AAChBC,sBAAM;AACFC,kCAAc,kBADZ;AAEFC,wBAAK,eAAM;;AAEP,4BAAMF,OAAOG,iBAAEC,GAAF,CAAMV,IAAN,EAAW,MAAX,EAAkB,EAAlB,CAAb;;AAEA,+BAAOM,KAAKK,MAAZ;AACH;AAPC,iBADU;AAUhBC,uBAAM;AACFL,kCAAc,sBADZ;AAEFC,wBAAK,eAAK;;AAEN,4BAAMI,QAAQH,iBAAEC,GAAF,CAAMV,IAAN,EAAW,OAAX,EAAmB,EAAnB,CAAd;;AAEA,4BAAG,CAACY,MAAMD,MAAP,IAAiB,CAAC,qBAAQC,KAAR,CAArB,EAAoC;AAChC,mCAAO,IAAP;AACH;AACD,+BAAO,KAAP;AACH;AAVC,iBAVU;AAsBhBC,0BAAS;AACLN,kCAAc,0EADT;AAELC,wBAAK,eAAK;;AAEN,4BAAMK,WAAWJ,iBAAEC,GAAF,CAAMV,IAAN,EAAW,UAAX,EAAsB,EAAtB,CAAjB;;AAEA,4BAAG,CAACa,SAASF,MAAV,IAAoB,CAACE,SAASF,MAAV,GAAiB,CAAxC,EAA0C;AACtC,mCAAO,IAAP;AACH;AACD,+BAAO,KAAP;AACH;AAVI;;AAcb;AApCoB,aAApB,CAqCAP,OAAOU,OAAP,CAAe,UAACC,KAAD,EAAU;;AAErB,oBAAMC,kBAAkBP,iBAAEC,GAAF,CAAML,WAAN,EAAkBU,KAAlB,CAAxB;;AAKI,oBAAME,UAAUD,gBAAgBR,EAAhB,EAAhB;AACA,oBAAMU,MAAMF,gBAAgBT,YAA5B;;AAEA,oBAAG,CAACU,OAAJ,EAAY;AACRd,2BAAOgB,IAAP,CAAYD,GAAZ;AACH;AAIR,aAhBD;;AAkBA,gBAAGf,OAAOQ,MAAV,EAAiB;;AAEb,oBAAMT,MAAMO,iBAAEW,IAAF,CAAOjB,MAAP,EAAc,GAAd,CAAZ;AACA,uBAAOF,SAASC,GAAT,EAAa,IAAb,CAAP;AACH;;AAED,mBAAOD,SAAS,IAAT,EAAcD,IAAd,CAAP;AACH;;;+BAGMA,I,EAAK;AAAA;;AAER,gBAAMqB,KAAK,KAAKtB,GAAL,CAASsB,EAApB;;AAEAC,oBAAQC,GAAR,CAAY,QAAZ,EAAqBvB,IAArB;;AAEA,mBAAO,IAAIwB,yBAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAmB;;AAElC,sBAAKC,UAAL,CAAgB3B,IAAhB,EAAsB,UAACE,GAAD,EAAMF,IAAN,EAAc;;AAEhC,wBAAGE,GAAH,EAAO;AACH,+BAAQA,GAAR;AACH;;AAED,wBAAM0B,MAAMP,GAAGA,EAAH,CAAM,SAAN,CAAZ;;AAEAO,wBAAIC,UAAJ,CAAe,OAAf,EAAwBC,SAAxB,CAAkC9B,IAAlC,EAAuC,UAACE,GAAD,EAAK6B,IAAL,EAAa;;AAEhD;AACI,4BAAG7B,GAAH,EAAO;AACH,mCAAOwB,OAAO,EAACM,SAAS,sBAAV,EAAP,CAAP;AACH;;AAEL;AACI,+BAAOP,QAAQzB,IAAR,CAAP;AACP,qBATD;AAYH,iBApBD;AAuBH,aAzBM,CAAP;AA4BH;;;;;;kBAjHgBF,I","file":"user.js","sourcesContent":["import _ from 'lodash';\nimport {isEmail} from '../helper';\nimport Promise from 'promise-polyfill';\n\n\nexport default class User{\n\n    constructor(app){\n\n        this.app = app;\n\n    }\n\n    beforeSave(user, callback = (err,user) =>{}){\n\n        //first validate user before saving to collection.\n\n        let errors = [];\n        const fields = ['name','email','password'];\n        const validations = {\n            name: {\n                errorMessage: 'Name is Required',\n                do : () => {\n\n                    const name = _.get(user,'name','');\n\n                    return name.length;\n                }\n            },\n            email:{\n                errorMessage: 'Email is not correct',\n                do : () =>{\n\n                    const email = _.get(user,'email','');\n\n                    if(!email.length || !isEmail(email)){\n                        return true;\n                    }\n                    return false;\n                }\n            },\n            password:{\n                errorMessage: 'Password is required and its length should be more then three characters',\n                do : () =>{\n\n                    const password = _.get(user,'password','');\n\n                    if(!password.length || !password.length<3){\n                        return true;\n                    }\n                    return false;\n                }\n            }\n        }\n\n        //feild validation\n        fields.forEach((feild) =>{\n\n            const feildvalidation = _.get(validations,feild);\n            \n             \n           \n\n                const isValid = feildvalidation.do();\n                const msg = feildvalidation.errorMessage;\n\n                if(!isValid){\n                    errors.push(msg);\n                }\n\n                \n            \n        })\n\n        if(errors.length){\n\n            const err = _.join(errors,',');\n            return callback(err,null);\n        }\n\n        return callback(null,user);\n    }\n\n\n    create(user){\n\n        const db = this.app.db;\n\n        console.log('User: ',user);\n\n        return new Promise((resolve,reject) =>{\n\n            this.beforeSave(user, (err, user) =>{\n\n                if(err){\n                    return (err);\n                }\n\n                const dbo = db.db(\"chatapp\");\n\n                dbo.collection('users').insertOne(user,(err,info) =>{\n    \n                    //check if error return error to user\n                        if(err){\n                            return reject({message: \"An error saving user\"});\n                        }\n\n                    //otherwise return user object to user.\n                        return resolve(user);\n                });\n\n                \n            });\n\n             \n        });\n\n    \n    }\n}"]}